
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND AS ASTERISK CALL COMMA CREATE DISCARD DO DOT END EQUALS EXPORT FROM GE GT IDENTIFIER IMPORT JOIN LE LIMIT LPAREN LT NOTEQUAL NUMBER PRINT PROCEDURE RENAME RPAREN SELECT SEMICOLON STRING TABLE USING WHEREprogram : statementsstatements : statements statement\n                      | statementstatement : IMPORT TABLE IDENTIFIER FROM STRING SEMICOLONstatement : EXPORT TABLE IDENTIFIER AS STRING SEMICOLONstatement : DISCARD TABLE IDENTIFIER SEMICOLONstatement : RENAME TABLE IDENTIFIER IDENTIFIER SEMICOLONstatement : PRINT TABLE IDENTIFIER SEMICOLONstatement : SELECT select_columns FROM IDENTIFIER where_clause limit_clause SEMICOLONselect_columns : ASTERISKselect_columns : column_listcolumn_list : IDENTIFIER\n                       | column_list COMMA IDENTIFIERwhere_clause : WHERE condition\n                        | emptycondition : IDENTIFIER EQUALS value\n                     | IDENTIFIER NOTEQUAL value\n                     | IDENTIFIER GT value\n                     | IDENTIFIER LT value\n                     | IDENTIFIER GE value\n                     | IDENTIFIER LE value\n                     | condition AND conditionlimit_clause : LIMIT NUMBER\n                        | emptyvalue : NUMBER\n                 | STRING\n        statement : CREATE TABLE IDENTIFIER select_source SEMICOLON\n                  | CREATE TABLE IDENTIFIER SELECT select_columns FROM IDENTIFIER where_clause limit_clause SEMICOLON\n        select_source : FROM IDENTIFIER\n                         | FROM IDENTIFIER JOIN IDENTIFIER USING LPAREN IDENTIFIER RPARENstatement : PROCEDURE IDENTIFIER DO statements END\n                  | PROCEDURE IDENTIFIER DO statements END SEMICOLONstatement : CALL IDENTIFIER SEMICOLONempty :'
    
_lr_action_items = {'IMPORT':([0,2,3,13,34,35,38,40,46,49,53,56,57,58,66,67,91,],[4,4,-3,-2,4,-33,-6,-8,4,-7,-27,-31,-4,-5,-32,-9,-28,]),'EXPORT':([0,2,3,13,34,35,38,40,46,49,53,56,57,58,66,67,91,],[5,5,-3,-2,5,-33,-6,-8,5,-7,-27,-31,-4,-5,-32,-9,-28,]),'DISCARD':([0,2,3,13,34,35,38,40,46,49,53,56,57,58,66,67,91,],[6,6,-3,-2,6,-33,-6,-8,6,-7,-27,-31,-4,-5,-32,-9,-28,]),'RENAME':([0,2,3,13,34,35,38,40,46,49,53,56,57,58,66,67,91,],[7,7,-3,-2,7,-33,-6,-8,7,-7,-27,-31,-4,-5,-32,-9,-28,]),'PRINT':([0,2,3,13,34,35,38,40,46,49,53,56,57,58,66,67,91,],[8,8,-3,-2,8,-33,-6,-8,8,-7,-27,-31,-4,-5,-32,-9,-28,]),'SELECT':([0,2,3,13,33,34,35,38,40,46,49,53,56,57,58,66,67,91,],[9,9,-3,-2,44,9,-33,-6,-8,9,-7,-27,-31,-4,-5,-32,-9,-28,]),'CREATE':([0,2,3,13,34,35,38,40,46,49,53,56,57,58,66,67,91,],[10,10,-3,-2,10,-33,-6,-8,10,-7,-27,-31,-4,-5,-32,-9,-28,]),'PROCEDURE':([0,2,3,13,34,35,38,40,46,49,53,56,57,58,66,67,91,],[11,11,-3,-2,11,-33,-6,-8,11,-7,-27,-31,-4,-5,-32,-9,-28,]),'CALL':([0,2,3,13,34,35,38,40,46,49,53,56,57,58,66,67,91,],[12,12,-3,-2,12,-33,-6,-8,12,-7,-27,-31,-4,-5,-32,-9,-28,]),'$end':([1,2,3,13,35,38,40,49,53,56,57,58,66,67,91,],[0,-1,-3,-2,-33,-6,-8,-7,-27,-31,-4,-5,-32,-9,-28,]),'END':([3,13,35,38,40,46,49,53,56,57,58,66,67,91,],[-3,-2,-33,-6,-8,56,-7,-27,-31,-4,-5,-32,-9,-28,]),'TABLE':([4,5,6,7,8,10,],[14,15,16,17,18,23,]),'ASTERISK':([9,44,],[21,21,]),'IDENTIFIER':([9,11,12,14,15,16,17,18,23,29,31,32,44,45,51,64,65,69,90,],[20,24,25,26,27,28,29,30,33,39,41,42,20,55,63,76,77,63,92,]),'FROM':([19,20,21,22,26,33,42,54,],[31,-12,-10,-11,36,45,-13,64,]),'COMMA':([20,22,42,],[-12,32,-13,]),'DO':([24,],[34,]),'SEMICOLON':([25,28,30,39,41,43,47,48,50,52,55,56,59,61,62,68,76,78,79,80,81,82,83,84,85,86,87,89,93,],[35,38,40,49,-34,53,57,58,-34,-15,-29,66,67,-24,-14,-23,-34,-22,-16,-25,-26,-17,-18,-19,-20,-21,-34,91,-30,]),'AS':([27,],[37,]),'STRING':([36,37,70,71,72,73,74,75,],[47,48,81,81,81,81,81,81,]),'WHERE':([41,76,],[51,51,]),'LIMIT':([41,50,52,62,76,78,79,80,81,82,83,84,85,86,87,],[-34,60,-15,-14,-34,-22,-16,-25,-26,-17,-18,-19,-20,-21,60,]),'JOIN':([55,],[65,]),'NUMBER':([60,70,71,72,73,74,75,],[68,80,80,80,80,80,80,]),'AND':([62,78,79,80,81,82,83,84,85,86,],[69,69,-16,-25,-26,-17,-18,-19,-20,-21,]),'EQUALS':([63,],[70,]),'NOTEQUAL':([63,],[71,]),'GT':([63,],[72,]),'LT':([63,],[73,]),'GE':([63,],[74,]),'LE':([63,],[75,]),'USING':([77,],[88,]),'LPAREN':([88,],[90,]),'RPAREN':([92,],[93,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,34,],[2,46,]),'statement':([0,2,34,46,],[3,13,3,13,]),'select_columns':([9,44,],[19,54,]),'column_list':([9,44,],[22,22,]),'select_source':([33,],[43,]),'where_clause':([41,76,],[50,87,]),'empty':([41,50,76,87,],[52,61,52,61,]),'limit_clause':([50,87,],[59,89,]),'condition':([51,69,],[62,78,]),'value':([70,71,72,73,74,75,],[79,82,83,84,85,86,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','cql_grammar.py',85),
  ('statements -> statements statement','statements',2,'p_statements','cql_grammar.py',89),
  ('statements -> statement','statements',1,'p_statements','cql_grammar.py',90),
  ('statement -> IMPORT TABLE IDENTIFIER FROM STRING SEMICOLON','statement',6,'p_statement_import','cql_grammar.py',98),
  ('statement -> EXPORT TABLE IDENTIFIER AS STRING SEMICOLON','statement',6,'p_statement_export','cql_grammar.py',102),
  ('statement -> DISCARD TABLE IDENTIFIER SEMICOLON','statement',4,'p_statement_discard','cql_grammar.py',106),
  ('statement -> RENAME TABLE IDENTIFIER IDENTIFIER SEMICOLON','statement',5,'p_statement_rename','cql_grammar.py',110),
  ('statement -> PRINT TABLE IDENTIFIER SEMICOLON','statement',4,'p_statement_print','cql_grammar.py',114),
  ('statement -> SELECT select_columns FROM IDENTIFIER where_clause limit_clause SEMICOLON','statement',7,'p_statement_select','cql_grammar.py',118),
  ('select_columns -> ASTERISK','select_columns',1,'p_select_columns_asterisk','cql_grammar.py',122),
  ('select_columns -> column_list','select_columns',1,'p_select_columns_list','cql_grammar.py',126),
  ('column_list -> IDENTIFIER','column_list',1,'p_column_list','cql_grammar.py',130),
  ('column_list -> column_list COMMA IDENTIFIER','column_list',3,'p_column_list','cql_grammar.py',131),
  ('where_clause -> WHERE condition','where_clause',2,'p_where_clause','cql_grammar.py',139),
  ('where_clause -> empty','where_clause',1,'p_where_clause','cql_grammar.py',140),
  ('condition -> IDENTIFIER EQUALS value','condition',3,'p_condition','cql_grammar.py',144),
  ('condition -> IDENTIFIER NOTEQUAL value','condition',3,'p_condition','cql_grammar.py',145),
  ('condition -> IDENTIFIER GT value','condition',3,'p_condition','cql_grammar.py',146),
  ('condition -> IDENTIFIER LT value','condition',3,'p_condition','cql_grammar.py',147),
  ('condition -> IDENTIFIER GE value','condition',3,'p_condition','cql_grammar.py',148),
  ('condition -> IDENTIFIER LE value','condition',3,'p_condition','cql_grammar.py',149),
  ('condition -> condition AND condition','condition',3,'p_condition','cql_grammar.py',150),
  ('limit_clause -> LIMIT NUMBER','limit_clause',2,'p_limit_clause','cql_grammar.py',157),
  ('limit_clause -> empty','limit_clause',1,'p_limit_clause','cql_grammar.py',158),
  ('value -> NUMBER','value',1,'p_value','cql_grammar.py',162),
  ('value -> STRING','value',1,'p_value','cql_grammar.py',163),
  ('statement -> CREATE TABLE IDENTIFIER select_source SEMICOLON','statement',5,'p_statement_create','cql_grammar.py',168),
  ('statement -> CREATE TABLE IDENTIFIER SELECT select_columns FROM IDENTIFIER where_clause limit_clause SEMICOLON','statement',10,'p_statement_create','cql_grammar.py',169),
  ('select_source -> FROM IDENTIFIER','select_source',2,'p_select_source','cql_grammar.py',183),
  ('select_source -> FROM IDENTIFIER JOIN IDENTIFIER USING LPAREN IDENTIFIER RPAREN','select_source',8,'p_select_source','cql_grammar.py',184),
  ('statement -> PROCEDURE IDENTIFIER DO statements END','statement',5,'p_statement_procedure','cql_grammar.py',191),
  ('statement -> PROCEDURE IDENTIFIER DO statements END SEMICOLON','statement',6,'p_statement_procedure','cql_grammar.py',192),
  ('statement -> CALL IDENTIFIER SEMICOLON','statement',3,'p_statement_call','cql_grammar.py',196),
  ('empty -> <empty>','empty',0,'p_empty','cql_grammar.py',200),
]
